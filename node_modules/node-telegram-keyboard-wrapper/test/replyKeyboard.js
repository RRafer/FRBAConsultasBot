"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const assert = require("assert");
const mocha_1 = require("mocha");
/*
 * Tests for Reply Keyboards
 */
mocha_1.describe("Reply Keyboards tests", () => {
    // Some dummy data
    let firstLoad = ["This is a field.", "This is another field"];
    let secondLoad = ["Meh"];
    let thirdLoad = ["Third load button"];
    mocha_1.describe(".addRow(...keys)", () => {
        let keyboard;
        mocha_1.beforeEach("init keyboard", () => {
            keyboard = new __1.ReplyKeyboard();
        });
        it("Should add elements to a row and return the right number of rows via .extract() method", () => {
            keyboard
                .addRow(...firstLoad)
                .addRow(...secondLoad);
            assert.equal(keyboard.length, 2);
        });
        it("Should have a length property after .addRow(), which returns the amount of rows", () => {
            assert.equal(keyboard.addRow(...thirdLoad).length, 1);
        });
    });
    mocha_1.describe(".open()", () => {
        let keyboard = new __1.ReplyKeyboard();
        keyboard
            .addRow(...firstLoad)
            .addRow(...secondLoad);
        it("Should return the data structure for telegram", () => {
            assert.deepStrictEqual(keyboard.open(), {
                reply_markup: {
                    keyboard: [firstLoad, secondLoad]
                }
            });
        });
    });
    mocha_1.describe(".close()", () => {
        let keyboard = new __1.ReplyKeyboard();
        keyboard
            .addRow(...firstLoad)
            .addRow(...secondLoad);
        it("Should return the telegram data structure", () => {
            assert.deepStrictEqual(keyboard.close(), {
                reply_markup: {
                    remove_keyboard: true,
                }
            });
        });
    });
});
